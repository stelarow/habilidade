name: Quality Gates & Code Standards

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      analysis_type:
        description: 'Type of quality analysis'
        required: true
        default: 'full'
        type: choice
        options:
          - 'code-quality'
          - 'test-coverage'
          - 'performance'
          - 'accessibility'
          - 'full'

env:
  NODE_VERSION: '20'
  QUALITY_GATE_COVERAGE: 80
  QUALITY_GATE_MAINTAINABILITY: 'A'
  QUALITY_GATE_RELIABILITY: 'A'
  QUALITY_GATE_SECURITY: 'A'

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

concurrency:
  group: quality-gates-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality-analysis:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.analysis_type == 'code-quality' || github.event.inputs.analysis_type == 'full' || github.event.inputs.analysis_type == null
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint with detailed reporting
        run: |
          echo "üîç Running ESLint analysis..."
          npx eslint src/ --ext .js,.jsx,.ts,.tsx --format json > eslint-report.json || true
          npx eslint src/ --ext .js,.jsx,.ts,.tsx --format html > eslint-report.html || true
          npx eslint src/ --ext .js,.jsx,.ts,.tsx || true

      - name: Run SonarJS analysis
        run: |
          echo "üéØ Running SonarJS analysis..."
          npx eslint src/ --ext .js,.jsx,.ts,.tsx -c sonarjs.config.js --format json > sonarjs-report.json || true
        continue-on-error: true

      - name: Analyze code complexity
        run: |
          echo "üìè Analyzing code complexity..."
          npx plato -r -d complexity-report src/ || echo "Plato analysis completed with warnings"

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-${{ github.sha }}
          path: |
            eslint-report.*
            sonarjs-report.json
            complexity-report/
          retention-days: 30

  test-coverage-analysis:
    name: üß™ Test Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.analysis_type == 'test-coverage' || github.event.inputs.analysis_type == 'full' || github.event.inputs.analysis_type == null
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests with coverage
        run: |
          echo "üß™ Running test suite with coverage..."
          npm run test:coverage -- --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: Generate coverage reports
        run: |
          echo "üìä Generating coverage reports..."

          # Generate different coverage report formats
          if [ -d "coverage" ]; then
            # Create coverage summary
            echo "## Coverage Summary" > coverage-summary.md
            if [ -f "coverage/coverage-summary.json" ]; then
              node -e "
                const coverage = require('./coverage/coverage-summary.json').total;
                console.log('| Metric | Percentage |');
                console.log('|--------|------------|');
                console.log('| Lines | ' + coverage.lines.pct + '% |');
                console.log('| Functions | ' + coverage.functions.pct + '% |');
                console.log('| Branches | ' + coverage.branches.pct + '% |');
                console.log('| Statements | ' + coverage.statements.pct + '% |');
              " >> coverage-summary.md
            fi
          fi

      - name: Check coverage quality gate
        run: |
          echo "üéØ Checking coverage quality gate..."

          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
            echo "Current coverage: $COVERAGE%"
            echo "Required coverage: ${{ env.QUALITY_GATE_COVERAGE }}%"

            if (( $(echo "$COVERAGE < ${{ env.QUALITY_GATE_COVERAGE }}" | bc -l) )); then
              echo "‚ùå Coverage below quality gate threshold!"
              echo "COVERAGE_FAILED=true" >> $GITHUB_ENV
            else
              echo "‚úÖ Coverage meets quality gate threshold"
            fi
          else
            echo "‚ö†Ô∏è No coverage data found"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-${{ github.sha }}
          path: |
            coverage/
            coverage-summary.md
          retention-days: 30

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./
          flags: main-website
          name: main-website-coverage

  performance-analysis:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.analysis_type == 'performance' || github.event.inputs.analysis_type == 'full' || github.event.inputs.analysis_type == null
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build:production
        env:
          CI: false
          NODE_ENV: production

      - name: Start application
        run: npm run preview &
        env:
          PORT: 4173

      - name: Wait for application
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli lighthouse

      - name: Run Lighthouse performance audit
        run: |
          echo "‚ö° Running Lighthouse performance audit..."
          lighthouse http://localhost:4173 \
            --only-categories=performance \
            --output=json \
            --output-path=lighthouse-performance.json \
            --chrome-flags="--headless --no-sandbox"

      - name: Run comprehensive Lighthouse audit
        run: |
          echo "üîç Running comprehensive Lighthouse audit..."
          lighthouse http://localhost:4173 \
            --output=json \
            --output=html \
            --output-path=lighthouse-full \
            --chrome-flags="--headless --no-sandbox"

      - name: Analyze bundle size
        run: |
          echo "üì¶ Analyzing bundle size..."

          BUILD_DIR="dist"

          # Generate bundle size report
          du -sh $BUILD_DIR > bundle-size.txt
          find $BUILD_DIR -name "*.js" -o -name "*.css" | xargs ls -lh > bundle-details.txt

      - name: Check performance quality gates
        run: |
          echo "üéØ Checking performance quality gates..."

          # Parse Lighthouse performance score
          PERF_SCORE=$(node -e "console.log(require('./lighthouse-performance.json').lhr.categories.performance.score * 100)")
          echo "Performance score: $PERF_SCORE"

          # Set quality gate thresholds
          PERF_THRESHOLD=85

          if (( $(echo "$PERF_SCORE < $PERF_THRESHOLD" | bc -l) )); then
            echo "‚ùå Performance score below threshold ($PERF_THRESHOLD)!"
            echo "PERF_FAILED=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Performance score meets threshold"
          fi

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis-${{ github.sha }}
          path: |
            lighthouse-*.*
            bundle-*.txt
          retention-days: 30

  accessibility-analysis:
    name: ‚ôø Accessibility Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.analysis_type == 'accessibility' || github.event.inputs.analysis_type == 'full' || github.event.inputs.analysis_type == null
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build:production
        env:
          CI: false
          NODE_ENV: production

      - name: Start application
        run: npm run preview &
        env:
          PORT: 4173

      - name: Wait for application
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli
          npm install -g pa11y
          npm install -g lighthouse

      - name: Run Axe accessibility scan
        run: |
          echo "‚ôø Running Axe accessibility scan for main-website..."
          axe http://localhost:4173 \
            --tags wcag2a,wcag2aa,wcag21aa \
            --reporter json \
            --output-file axe-results.json || true

      - name: Run Pa11y accessibility scan
        run: |
          echo "üîç Running Pa11y accessibility scan for main-website..."
          pa11y http://localhost:4173 \
            --standard WCAG2AA \
            --reporter json > pa11y-results.json || true

      - name: Run Lighthouse accessibility audit
        run: |
          echo "üí° Running Lighthouse accessibility audit for main-website..."
          lighthouse http://localhost:4173 \
            --only-categories=accessibility \
            --output=json \
            --output-path=lighthouse-a11y.json \
            --chrome-flags="--headless --no-sandbox"

      - name: Analyze accessibility results
        run: |
          echo "üìä Analyzing accessibility results for main-website..."
          
          # Parse Axe results
          if [ -f "axe-results.json" ]; then
            VIOLATIONS=$(node -e "console.log(require('./axe-results.json').violations.length)")
            echo "Axe violations: $VIOLATIONS"
          fi
          
          # Parse Lighthouse accessibility score
          if [ -f "lighthouse-a11y.json" ]; then
            A11Y_SCORE=$(node -e "console.log(require('./lighthouse-a11y.json').lhr.categories.accessibility.score * 100)")
            echo "Lighthouse accessibility score: $A11Y_SCORE"
            
            # Check quality gate
            A11Y_THRESHOLD=90
            if (( $(echo "$A11Y_SCORE < $A11Y_THRESHOLD" | bc -l) )); then
              echo "‚ùå Accessibility score below threshold ($A11Y_THRESHOLD)!"
              echo "A11Y_FAILED=true" >> $GITHUB_ENV
            else
              echo "‚úÖ Accessibility score meets threshold"
            fi
          fi

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-analysis-${{ github.sha }}
          path: |
            axe-results.json
            pa11y-results.json
            lighthouse-a11y.json
          retention-days: 30

  quality-gates-summary:
    name: üìã Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [code-quality-analysis, test-coverage-analysis, performance-analysis, accessibility-analysis]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: quality-results

      - name: Generate quality report
        run: |
          echo "# üìä Quality Gates Report" > quality-report.md
          echo "" >> quality-report.md
          echo "**Date**: $(date)" >> quality-report.md
          echo "**Commit**: $GITHUB_SHA" >> quality-report.md
          echo "**Branch**: $GITHUB_REF_NAME" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## üéØ Quality Gate Status" >> quality-report.md
          echo "" >> quality-report.md
          echo "| Check | Main Website | Learning Platform |" >> quality-report.md
          echo "|-------|--------------|-------------------|" >> quality-report.md
          echo "| Code Quality | ${{ needs.code-quality-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | ${{ needs.code-quality-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> quality-report.md
          echo "| Test Coverage | ${{ needs.test-coverage-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | ${{ needs.test-coverage-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> quality-report.md
          echo "| Performance | ${{ needs.performance-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | ${{ needs.performance-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> quality-report.md
          echo "| Accessibility | ${{ needs.accessibility-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | ${{ needs.accessibility-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## üìà Detailed Metrics" >> quality-report.md
          echo "" >> quality-report.md
          echo "Detailed metrics and reports are available in the workflow artifacts." >> quality-report.md
          echo "" >> quality-report.md
          
          echo "## üîÑ Next Actions" >> quality-report.md
          echo "" >> quality-report.md
          echo "1. Review any failed quality gates" >> quality-report.md
          echo "2. Address code quality issues and test coverage gaps" >> quality-report.md
          echo "3. Optimize performance bottlenecks" >> quality-report.md
          echo "4. Fix accessibility violations" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "---" >> quality-report.md
          echo "*Generated by GitHub Actions Quality Gates*" >> quality-report.md

      - name: Check overall quality status
        id: quality-status
        run: |
          FAILED_JOBS=0
          
          if [ "${{ needs.code-quality-analysis.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.test-coverage-analysis.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.performance-analysis.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.accessibility-analysis.result }}" != "success" ]; then
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          echo "failed-jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
          
          if [ $FAILED_JOBS -gt 0 ]; then
            echo "‚ùå $FAILED_JOBS quality gate(s) failed"
            exit 1
          else
            echo "‚úÖ All quality gates passed"
          fi

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-report-${{ github.sha }}
          path: quality-report.md
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            const failedJobs = ${{ steps.quality-status.outputs.failed-jobs }};
            
            const emoji = failedJobs === 0 ? '‚úÖ' : '‚ùå';
            const status = failedJobs === 0 ? 'All quality gates passed!' : `${failedJobs} quality gate(s) failed`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ${emoji} Quality Gates Results\n\n**Status**: ${status}\n\n${report}\n\n**Artifacts**: Detailed reports available in workflow artifacts for 30 days.`
            });