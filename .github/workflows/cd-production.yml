name: CD - Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  DEPLOYMENT_TIMEOUT: '10m'

concurrency:
  group: production-deployment
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

jobs:
  pre-deployment:
    name: üîç Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy-main: ${{ steps.changes.outputs.main-website || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
      version: ${{ steps.version.outputs.version }}
      force-deploy: ${{ github.event.inputs.force_deploy == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            main-website:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'vite.config.js'

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="main-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Deployment version: $VERSION"

      - name: Validate deployment readiness
        if: github.event.inputs.force_deploy != 'true'
        run: |
          # Check if CI passed on the latest commit
          echo "üîç Checking CI status for commit: $GITHUB_SHA"
          
          # This would typically check GitHub API for CI status
          # For now, we'll assume CI passed if we're on main branch
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            echo "‚úÖ On main branch, proceeding with deployment"
          else
            echo "‚ùå Not on main branch, deployment may be risky"
          fi

  deploy-main-website:
    name: üöÄ Deploy Main Website
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-main == 'true'
    environment:
      name: production
      url: https://stelarow.github.io/habilidade
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build for production
        run: npm run build:production
        env:
          CI: false
          NODE_ENV: production
          VITE_APP_VERSION: ${{ needs.pre-deployment.outputs.version }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "üåê Verifying deployment at: ${{ steps.deployment.outputs.page_url }}"
          sleep 30
          curl -f ${{ steps.deployment.outputs.page_url }} || exit 1
          echo "‚úÖ Main website deployed successfully"

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production-main-website',
              description: 'Main website deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              target_url: '${{ steps.deployment.outputs.page_url }}',
              description: 'Successfully deployed main website'
            });

  post-deployment:
    name: üìä Post-deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-main-website]
    if: always() && needs.deploy-main-website.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const mainStatus = '${{ needs.deploy-main-website.result }}';
            const version = '${{ needs.pre-deployment.outputs.version }}';

            let deploymentStatus = '‚úÖ **Main Website**: https://stelarow.github.io/habilidade';
            if (mainStatus === 'failure') {
              deploymentStatus = '‚ùå **Main Website**: Deployment failed';
            }

            const body = `## üöÄ Production Deployment Complete

            **Version**: \`${version}\`
            **Commit**: ${context.sha.substring(0, 7)}
            **Triggered by**: ${context.actor}

            ### Deployment Status
            ${deploymentStatus}

            ### Next Steps
            - Monitor application performance
            - Check error tracking dashboards
            - Verify all services are operational

            ---
            *Automated deployment completed at ${new Date().toISOString()}*`;

            // Create a release if this was a tag push
            if (context.ref.startsWith('refs/tags/')) {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: body,
                draft: false,
                prerelease: false
              });
            } else {
              // Otherwise, create an issue comment or discussion
              console.log('Deployment notification:', body);
            }

      - name: Update deployment status badge
        run: |
          echo "üè∑Ô∏è Updating deployment status..."
          # This could update a status badge or external monitoring system
          echo "Deployment completed for version: ${{ needs.pre-deployment.outputs.version }}"

  rollback:
    name: üîÑ Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.force_deploy != 'true'
    environment:
      name: rollback
    steps:
      - name: Manual rollback trigger
        run: |
          echo "‚ùå Deployment failed. Manual intervention may be required."
          echo "To rollback:"
          echo "1. Identify the last known good deployment"
          echo "2. Re-run this workflow with that commit SHA"
          echo "3. Or revert the problematic changes and push to main"
          
          echo "Current failed deployment details:"
          echo "- Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "- Commit: $GITHUB_SHA"
          echo "- Timestamp: $(date -u)"
          
          # This step always fails to ensure the rollback job is marked as failed
          # and requires manual intervention
          exit 1